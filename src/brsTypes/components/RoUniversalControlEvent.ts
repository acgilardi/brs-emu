import { BrsValue, ValueKind, BrsString, BrsBoolean } from "../BrsType";
import { BrsComponent } from "./BrsComponent";
import { BrsType } from "..";
import { Callable } from "../Callable";
import { Interpreter } from "../../interpreter";
import { Int32 } from "../Int32";

export class RoUniversalControlEvent extends BrsComponent implements BrsValue {
    readonly kind = ValueKind.Object;
    private key: number;

    constructor(key: number) {
        super("roUniversalControlEvent");
        this.key = key;

        this.registerMethods({
            ifUniversalControlEvent: [
                this.getInt,
                this.getKey,
                this.getRemoteID,
                this.getID,
                this.isPress,
                this.getChar,
            ],
        });
    }

    toString(parent?: BrsType): string {
        return "<Component: roUniversalControlEvent>";
    }

    equalTo(other: BrsType) {
        return BrsBoolean.False;
    }

    /** Returns an integer representing pressed or released keys on the remote. */
    private getInt = new Callable("getInt", {
        signature: {
            args: [],
            returns: ValueKind.Int32,
        },
        impl: (_: Interpreter) => {
            return new Int32(this.key);
        },
    });

    /** Returns the ID of the remote button that generated an event. */
    private getKey = new Callable("getKey", {
        signature: {
            args: [],
            returns: ValueKind.Int32,
        },
        impl: (_: Interpreter) => {
            if (this.key < 100) {
                return new Int32(this.key);
            }
            return new Int32(this.key - 100);
        },
    });

    /** Returns the ID of the remote button or character value represented by the event. */
    private getID = new Callable("getID", {
        signature: {
            args: [],
            returns: ValueKind.Int32,
        },
        impl: (_: Interpreter) => {
            // TODO: Implement support for keyboard letters and numbers
            if (this.key < 100) {
                return new Int32(this.key);
            }
            return new Int32(this.key - 100);
        },
    });

    /** Returns an identifier associated with the type and ID of the remote control that generated the event. */
    private getRemoteID = new Callable("getRemoteID", {
        signature: {
            args: [],
            returns: ValueKind.String,
        },
        impl: (_: Interpreter) => {
            return new BrsString("WD:0");
        },
    });

    /** Returns the Unicode character value generated by a keyboard key press event. */
    private getChar = new Callable("getChar", {
        signature: {
            args: [],
            returns: ValueKind.Int32,
        },
        impl: (_: Interpreter) => {
            return new Int32(0); // TODO: Implement support for keyboard letters and numbers
        },
    });

    /** Returns true if there is a press event; false otherwise. */
    private isPress = new Callable("isPress", {
        signature: {
            args: [],
            returns: ValueKind.Boolean,
        },
        impl: (_: Interpreter) => {
            return BrsBoolean.from(this.key < 100);
        },
    });
}
